{\rtf1\ansi\ansicpg949\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset129 NanumMyeongjo;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red106\green62\blue62;\red63\green95\blue191;
\red127\green127\blue159;\red42\green0\blue255;\red63\green127\blue95;\red0\green0\blue192;\red100\green100\blue100;
\red255\green0\blue0;\red0\green104\blue218;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c24706\c37255\c74902;
\csgenericrgb\c49804\c49804\c62353;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c0\c0\c75294;\csgenericrgb\c39216\c39216\c39216;
\csgenericrgb\c100000\c0\c0;\csgenericrgb\c0\c40784\c85490;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13280\viewh15980\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 32\'c0\'cf\'c2\'f7(cho)\
\
** Java 1.8 \'ba\'ce\'c5\'cd\'c0\'c7 \'bd\'ba\'c6\'ae\'b8\'b2\
\
1. java.io \'c6\'d0\'c5\'b0\'c1\'f6\'bf\'a1\'bc\'ad \'b4\'d9\'b7\'e7\'b4\'f8 \'c0\'d4\'c3\'e2\'b7\'c2 \'b0\'fc\'b7\'c3 \'bd\'ba\'c6\'ae\'b8\'b2\
\
- \'bf\'dc\'ba\'ce\'bf\'cd \'c5\'eb\'bd\'c5\'c0\'bb \'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8\'bc\'ad \'b8\'b8\'b5\'e7 \'c5\'eb\'b7\'ce\
- \'c0\'d4\'c3\'e2\'b7\'c2 \'bd\'ba\'c6\'ae\'b8\'b2\'b0\'fa \'b9\'d9\'c0\'cc\'c6\'ae \'b6\'c7\'b4\'c2 \'b9\'ae\'c0\'da \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'c7 \'ba\'d0\'b7\'f9\'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb\
\
2. java.util.stream \'c6\'d0\'c5\'b0\'c1\'f6\'bf\'a1\'bc\'ad \'b4\'d9\'b7\'e7\'b4\'c2 \'bd\'ba\'c6\'ae\'b8\'b2\
\
- \'b5\'a5\'c0\'cc\'c5\'cd\'c0\'c7 \'c1\'fd\'c7\'d5\'c0\'bb \'c8\'a3\'c0\'b2\'c0\'fb\'c0\'b8\'b7\'ce \'b4\'d9\'b7\'e7\'b1\'e2 \'c0\'a7\'c7\'d8\'bc\'ad JDK 1.8\'bf\'a1\'bc\'ad \'c3\'df\'b0\'a1\'b5\'c8 API\
- \'b1\'e2\'c1\'b8 API \'bf\'a1\'bc\'ad\'b4\'c2 Collection\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b4\'d9\'b7\'e7\'b0\'ed\'c0\'da \'c7\'cf\'b4\'c2 \'b0\'e6\'bf\'ec\'bf\'a1 \'b9\'dd\'ba\'b9\'b9\'ae\'c0\'bb \'b8\'b8\'b5\'e9\'be\'ee\'bc\'ad \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c7\'cf\'b3\'aa\'be\'bf \'b2\'a8\'b3\'bd \'c8\'c4\
\'c0\'db\'be\'f7\'c0\'bb \'bc\'f6\'c7\'e0\'c7\'cf\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\'bf\'a1 \'b4\'eb\'c0\'d4\'c7\'cf\'b4\'c2 \'b1\'b8\'c1\'b6\'c0\'d4\'b4\'cf\'b4\'d9.\
- stream api\'bf\'a1\'bc\'ad\'b4\'c2 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b2\'a8\'b3\'bb\'bc\'ad \'c0\'db\'be\'f7\'c0\'bb \'bc\'f6\'c7\'e0\'c7\'cf\'b4\'c2 \'c4\'da\'b5\'e5\'b8\'a6 \'c7\'cf\'b3\'aa\'b7\'ce \'b9\'ad\'be\'ee\'bc\'ad \'bb\'e7\'bf\'eb\'c7\'d2 \'bc\'f6 \'c0\'d6\'b5\'b5\'b7\'cf \'c7\'d8\'c1\'dd\'b4\'cf\'b4\'d9.\
\
\'bd\'c7\'bd\'c0) \'b1\'e2\'c1\'b8 \'c4\'c3\'b7\'ba\'bc\'c7\'c0\'bb \'b4\'d9\'b7\'e7\'b4\'c2 \'b9\'e6\'bd\'c4\'b0\'fa\'c0\'c7 \'c2\'f7\'c0\'cc\'c1\'a1\'c0\'bb \'c8\'ae\'c0\'ce\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8 \'c4\'da\'b5\'e5\
\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\
\cf2 public\cf0  \cf2 class\cf0  StreamMain1 \{\
\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf4 /**\cf0 \
\cf4 		List\cf5 <String>\cf4  list = new ArrayList<>();\cf0 \
\cf4 		list.add("\'c8\'c4\'b6\'f3\'c0\'cc\'b5\'e5\'c4\'a1\'c5\'b2");\cf0 \
\cf4 		list.add("\'be\'e7\'b3\'e4\'c4\'a1\'c5\'b2");\cf0 \
\cf4 		list.add("\'b0\'a3\'c0\'e5\'c4\'a1\'c5\'b2");\cf0 \
\cf4 		**/\cf0 \
		String [] \cf3 list\cf0  = \{\cf6 "\'c8\'c4\'b6\'f3\'c0\'cc\'b5\'e5\'c4\'a1\'c5\'b2"\cf0 , \cf6 "\'be\'e7\'b3\'e4\'c4\'a1\'c5\'b2"\cf0 , \cf6 "\'b0\'a3\'c0\'e5\'c4\'a1\'c5\'b2"\cf0 , \cf6 "\'c6\'c4\'b4\'df\'c4\'a1\'c5\'b2"\cf0 \};\
		\
		\cf7 // \'c0\'cf\'b9\'dd \'b9\'dd\'ba\'b9\'b9\'ae\'c0\'bb \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad \'c1\'a2\'b1\'d9\cf0 \
		\cf2 int\cf0  \cf3 i\cf0  = 0;\
		\cf2 int\cf0  \cf3 len\cf0  = \cf3 list\cf0 .\cf8 length\cf0 ;\
		\cf2 while\cf0 (\cf3 i\cf0 <\cf3 len\cf0 ) \{\
			\cf7 // \'b5\'a5\'c0\'cc\'c5\'cd \'b0\'a1\'c1\'ae\'bf\'c0\'b1\'e2\cf0 \
			String \cf3 item\cf0  = \cf3 list\cf0 [\cf3 i\cf0 ];\
			\cf7 // \'b0\'a1\'c1\'ae\'bf\'c2 \'b5\'a5\'c0\'cc\'c5\'cd \'c3\'e2\'b7\'c2 - \'c3\'e2\'b7\'c2\cf0 \
			System.\cf8 out\cf0 .printf(\cf6 "%s\\n"\cf0 , \cf3 item\cf0 );\
			\cf7 // \'c0\'ce\'b5\'a6\'bd\'ba \'ba\'af\'bc\'f6 \'c1\'f5\'b0\'a8\cf0 \
			\cf3 i\cf0 =\cf3 i\cf0 +1;\
		\}\
		System.\cf8 out\cf0 .printf(\cf6 "========\\n"\cf0 );\
		\
		\cf7 // iterator(cursor - \'b9\'dd\'ba\'b9\'c0\'da)\cf0 \
		\cf7 // \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b0\'a1\'c1\'ae\'bf\'c2 \'c0\'a7\'c4\'a1\'bf\'a1 \'b4\'eb\'b1\'e2\'c7\'cf\'b0\'ed \'c0\'d6\'b4\'d9\'b0\'a1 \'b4\'d9\'c0\'bd \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c3\'a3\'be\'c6\'b0\'a1\'b4\'c2 \'b9\'e6\'b9\'fd\cf0 \
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'ba \'bb\'e7\'bf\'eb \'b8\'f8\'c7\'d4(\'c0\'a7\'bf\'a1 \'c1\'d6\'bc\'ae \'c3\'b3\'b8\'ae\'b5\'c8 \ul Arraylist\ulnone \'bf\'a1\'bc\'ad\'b8\'b8 \'b0\'a1\'b4\'c9\cf0 \
		\cf4 /**\cf0 \
\cf4 		Iterator\cf5 <String>\cf4  iterator = list.iterator();\cf0 \
\cf4 		while(iterator.hasNext()) \{\cf0 \
\cf4 			String next = iterator.next();\cf0 \
\cf4 			System.out.printf("%s\\n", next);\cf0 \
\cf4 		\}\cf0 \
\cf4 		System.out.printf("========\\n");\cf0 \
\cf4 		**/\cf0 \
\
		\cf7 // \'c3\'d6\'b1\'d9\'bf\'a1\'b4\'c2 \'c0\'a7\'c0\'c7 \'b9\'e6\'bd\'c4\'c0\'bb \'b0\'b3\'bc\'b1\'c7\'d8\'bc\'ad Fast Enumeration \'c1\'a6\'b0\'f8\cf0 \
		\cf7 // \'be\'f0\'be\'ee\'bf\'a1 \'b5\'fb\'b6\'f3 Map\'b5\'b5 \'c0\'cc \'b9\'e6\'bd\'c4\'c0\'cc \'b0\'a1\'b4\'c9\cf0 \
		\cf2 for\cf0 (String \cf3 imsi\cf0  : \cf3 list\cf0 ) \{\
			System.\cf8 out\cf0 .printf(\cf6 "%s\\n"\cf0 , \cf3 imsi\cf0 );\
		\}\
		System.\cf8 out\cf0 .printf(\cf6 "========\\n"\cf0 );\
		\
		\cf7 // \'c0\'a7\'c0\'c7 \'b9\'ae\'c0\'e5\'c0\'bb \'c1\'b6\'b1\'dd \'b4\'f5 \'b0\'a3\'b0\'e1\'c7\'cf\'b0\'d4 \'c0\'db\'bc\'ba\cf0 \
		\cf7 // Stream<String> stream = list.stream(); <- \'b8\'c7\'c0\'a7\'bf\'a1 list \'c1\'d6\'bc\'ae\'c3\'b3\'b8\'ae\'bf\'eb\cf0 \
		Stream<String> \cf3 stream\cf0  = Arrays.stream(\cf3 list\cf0 );\
		\cf3 stream\cf0 .forEach(\cf3 name\cf0  -> System.\cf8 out\cf0 .println(\cf3 name\cf0 ));\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'b0\'e1\'b0\'fa)\
\pard\pardeftab720\partightenfactor0
\cf0 \'c8\'c4\'b6\'f3\'c0\'cc\'b5\'e5\'c4\'a1\'c5\'b2\
\'be\'e7\'b3\'e4\'c4\'a1\'c5\'b2\
\'b0\'a3\'c0\'e5\'c4\'a1\'c5\'b2\
========\
\'c8\'c4\'b6\'f3\'c0\'cc\'b5\'e5\'c4\'a1\'c5\'b2\
\'be\'e7\'b3\'e4\'c4\'a1\'c5\'b2\
\'b0\'a3\'c0\'e5\'c4\'a1\'c5\'b2\
========\
\'c8\'c4\'b6\'f3\'c0\'cc\'b5\'e5\'c4\'a1\'c5\'b2\
\'be\'e7\'b3\'e4\'c4\'a1\'c5\'b2\
\'b0\'a3\'c0\'e5\'c4\'a1\'c5\'b2\
========\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
** \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'c7 \'c6\'af\'c2\'a1\
\
1. \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'ba \'b5\'a5\'c0\'cc\'c5\'cd \'bf\'f8\'ba\'bb\'c0\'bb \'ba\'af\'b0\'e6\'c7\'cf\'c1\'f6 \'be\'ca\'bd\'c0\'b4\'cf\'b4\'d9.\
\
- \'c1\'df\'b0\'a3 \'b0\'e1\'b0\'fa\'b8\'a6 \'b9\'e8\'bf\'ad\'c0\'cc\'b3\'aa \'b8\'ae\'bd\'ba\'c6\'ae\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6\'b4\'c2 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\
\
2. \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'ba \'c0\'cf\'c8\'b8\'bf\'eb\
\
- \'c7\'d1 \'b9\'f8 \'bb\'e7\'bf\'eb\'c7\'cf\'b0\'ed \'b3\'aa\'b8\'e9 \'b4\'d9\'c0\'bd\'bf\'a1 \'bb\'e7\'bf\'eb\'c7\'d2 \'b6\'a7\'b4\'c2 \'c0\'e7\'bb\'fd\'bc\'ba\'c0\'bb \'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb\
\
3. \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'ba \'b3\'bb\'ba\'ce\'c0\'fb\'c0\'b8\'b7\'ce \'b9\'dd\'ba\'b9\'b9\'ae\'c0\'bb \'b8\'b8\'b5\'e9\'be\'ee\'bc\'ad \'c3\'b3\'b8\'ae\
\
4. \'b4\'d9\'be\'e7\'c7\'d1 \'c1\'df\'b0\'a3\'bf\'ac\'bb\'ea(\'b5\'a5\'c0\'cc\'c5\'cd \'c0\'fc\'c3\'b3\'b8\'ae - \'ba\'af\'c8\'af,\'c7\'ca\'c5\'cd\'b8\'b5,\'c1\'a4\'b7\'c4)\'b0\'fa \'c3\'d6\'c1\'be\'bf\'ac\'bb\'ea(\'c1\'fd\'b0\'e8 - \'b9\'dd\'ba\'b9\'bc\'f6\'c7\'e0,\'b0\'b3\'bc\'f6,\'c6\'f2\'b1\'d5,\'c7\'d5\'b0\'e8,\'c3\'d6\'b4\'eb,\'c3\'d6\'bc\'d2)\'c0\'bb \'c1\'a6\'b0\'f8\
\
5. \'c1\'f6\'bf\'ac\'b5\'c8 \'bf\'ac\'bb\'ea\
\
- \'c1\'df\'b0\'a3\'bf\'ac\'bb\'ea\'c0\'c7 \'b0\'e6\'bf\'ec \'c8\'a3\'c3\'e2\'c7\'d2\'b6\'a7 \'bc\'f6\'c7\'e0\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'cc \'be\'c6\'b4\'cf\'b0\'ed \'c3\'d6\'c1\'be\'bf\'ac\'bb\'ea\'c0\'bb \'c7\'cf\'b1\'e2 \'c1\'f7\'c0\'fc\'bf\'a1 \'bc\'f6\'c7\'e0\
\
6. \'ba\'b4\'b7\'c4 \'c3\'b3\'b8\'ae\'b8\'a6 \'bd\'b1\'b0\'d4 \'b1\'b8\'c7\'f6\
\
** \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'c7 \'c1\'be\'b7\'f9\
\
Stream : Generic \'bb\'e7\'bf\'eb , IntStream, LongStream, DoubleStream\
\
** \'bd\'ba\'c6\'ae\'b8\'b2 \'bb\'fd\'bc\'ba\
\
1. \'c4\'c3\'b7\'ba\'bc\'c7\'c0\'bb \'c0\'cc\'bf\'eb : stream() \'c0\'cc\'b6\'f3\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\'b8\'b8 \'c8\'a3\'c3\'e2\'c7\'cf\'b8\'e9 \'b8\'ae\'c5\'cf\
\
2. \'b9\'e8\'bf\'ad\'c0\'bb \'c0\'cc\'bf\'eb : Arrays.stream(\'b9\'e8\'bf\'ad)\
\
3. \'b7\'a3\'b4\'fd\'c7\'d1 \'bd\'ba\'c6\'ae\'b8\'b2 \'bb\'fd\'bc\'ba : Random.doubles(), Random.ints(), Random.longs()\
\
4. \'c1\'a4\'bc\'f6 \'b9\'fc\'c0\'a7\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d1 \'bb\'fd\'bc\'ba : IntStream.range(int, int), LongStream.range(long, long)\
\
5. \'c6\'c4\'c0\'cf \'b0\'e6\'b7\'ce\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d1 \'bb\'fd\'bc\'ba : Files.list(Path)\
\
** \'c1\'df\'b0\'a3 \'bf\'ac\'bb\'ea\
\
- \'b5\'a5\'c0\'cc\'c5\'cd \'c0\'fc\'c3\'b3\'b8\'ae\'b8\'a6 \'c0\'a7\'c7\'d1 \'bf\'ac\'bb\'ea\
- \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c1\'d9\'c0\'ce\'b4\'d9\'b0\'ed \'c7\'cf\'b0\'ed Reduction \'c0\'cc\'b6\'f3\'b0\'ed\'b5\'b5 \'c7\'d5\'b4\'cf\'b4\'d9.\
- (Map - Reduce\'b6\'f3\'b0\'ed \'c7\'d2 \'b6\'a7 Reduce)\
- \'ba\'af\'c8\'af, \'c7\'ca\'c5\'cd\'b8\'b5, \'c1\'a4\'b7\'c4, \'b1\'d7\'b7\'ec\'c8\'ad \'b5\'ee\'c0\'cc \'bf\'a9\'b1\'e2\'bf\'a1 \'c7\'d8\'b4\'e7\'b5\'cb\'b4\'cf\'b4\'d9.\
- \'c1\'df\'b0\'a3 \'bf\'ac\'bb\'ea \'b8\'de\'bc\'d2\'b5\'e5\'b4\'c2 \'bf\'a9\'b7\'af \'b9\'f8 \'bf\'ac\'bc\'d3\'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\
- \'c3\'d6\'c1\'be \'bf\'ac\'bb\'ea \'b8\'de\'bc\'d2\'b5\'e5\'b0\'a1 \'b3\'aa\'bf\'cd\'be\'df \'b0\'e1\'b0\'fa\'b4\'c2 \'c8\'ae\'c0\'ce\'c0\'cc \'b0\'a1\'b4\'c9\
\
1. \'c7\'ca\'c5\'cd\'b8\'b5\
\
1) skip(long n) : n\'b0\'b3 \'b8\'b8\'c5\'ad \'b0\'c7\'b3\'ca\'b6\'d9\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\
2) limit(long n) : n\'b0\'b3 \'b8\'b8\'c5\'ad\'b8\'b8 \'c3\'df\'c3\'e2\'c7\'cf\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\
3) distinct() : \'c1\'df\'ba\'b9\'c0\'bb \'c1\'a6\'b0\'c5\'c7\'cf\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\'c0\'ce\'b5\'a5 equals \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'c0\'cc\'bf\'eb\
4) filter(\'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b0\'a1 1\'b0\'b3\'c0\'cc\'b0\'ed boolean\'c0\'bb \'b8\'ae\'c5\'cf\'c7\'cf\'b4\'c2 \'b6\'f7\'b4\'d9\'bd\'c4) : true\'b0\'a1 \'b8\'ae\'c5\'cf\'b5\'c8 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'b8 \'c3\'df\'c3\'e2\
\
\'bd\'c7\'bd\'c01) \'c7\'ca\'c5\'cd\'b8\'b5 \'b0\'fc\'b7\'c3 \'b8\'de\'bc\'d2\'b5\'e5 \'bb\'e7\'bf\'eb\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain1 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // \'b9\'ae\'c0\'da\'bf\'ad \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		String [] \cf3 ar\cf0  = \{\cf6 "\'bb\'ef\'b0\'e3\'bb\'ec"\cf0 , \cf6 "\'b8\'f1\'bb\'ec"\cf0 , \cf6 "\'b0\'a5\'b8\'c5\'b1\'e2\'bb\'ec"\cf0 , \cf6 "\'b5\'ee\'bd\'c9"\cf0 , \cf6 "\'bb\'ef\'b0\'e3\'bb\'ec"\cf0 , \cf6 "\'c7\'d7\'c1\'a4\'bb\'ec"\cf0 , \cf6 "\'b8\'f1\'bb\'ec"\cf0 \};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad Stream\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Stream <String> \cf3 stream\cf0  = Arrays.stream(\cf3 ar\cf0 );\
		\cf7 // \'c1\'df\'ba\'b9 \'c1\'a6\'b0\'c5\cf0 \
		\cf3 stream\cf0 .distinct().forEach(\cf3 name\cf0  -> System.\cf8 out\cf0 .println(\cf3 name\cf0 ));\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'b0\'e1\'b0\'fa1)\
\pard\pardeftab720\partightenfactor0
\cf0 \'bb\'ef\'b0\'e3\'bb\'ec\
\'b8\'f1\'bb\'ec\
\'b0\'a5\'b8\'c5\'b1\'e2\'bb\'ec\
\'b5\'ee\'bd\'c9\
\'c7\'d7\'c1\'a4\'bb\'ec\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'bd\'c7\'bd\'c02)  skip, limit \'c8\'b0\'bf\'eb\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain1 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // \'b9\'ae\'c0\'da\'bf\'ad \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		String [] \cf3 ar\cf0  = \{\cf6 "\'bb\'ef\'b0\'e3\'bb\'ec"\cf0 , \cf6 "\'b8\'f1\'bb\'ec"\cf0 , \cf6 "\'b0\'a5\'b8\'c5\'b1\'e2\'bb\'ec"\cf0 , \cf6 "\'b5\'ee\'bd\'c9"\cf0 , \cf6 "\'bb\'ef\'b0\'e3\'bb\'ec"\cf0 , \cf6 "\'c7\'d7\'c1\'a4\'bb\'ec"\cf0 , \cf6 "\'b8\'f1\'bb\'ec"\cf0 \};\
		\cf2 int\cf0  \cf3 PageCount\cf0  = 2;\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad Stream\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Stream <String> \cf3 \ul \ulc3 stream\cf0 \ulnone  = Arrays.stream(\cf3 ar\cf0 );\
		\cf7 // skip, limit \'c8\'b0\'bf\'eb\cf0 \
		\cf2 int\cf0  \cf3 len\cf0  = \cf3 ar\cf0 .\cf8 length\cf0 ;\
		\cf2 for\cf0 (\cf2 int\cf0  \cf3 i\cf0 =0; \cf3 i\cf0 <\cf3 len\cf0 ; \cf3 i\cf0 =\cf3 i\cf0 +1) \{\
			Stream <String> \cf3 imsi\cf0  = Arrays.stream(\cf3 ar\cf0 );\
			\cf3 imsi\cf0 .skip(\cf3 i\cf0 *\cf3 PageCount\cf0 ).limit(\cf3 PageCount\cf0 ).forEach(\cf3 name\cf0  -> System.\cf8 out\cf0 .println(\cf3 name\cf0 ));\
			\cf2 try\cf0  \{\
				Thread.sleep(4000);\
			\}\cf2 catch\cf0 (Exception \cf3 e\cf0 ) \{\}\
		\}\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'b0\'e1\'b0\'fa2)\
2\'b0\'b3\'be\'bf \'b0\'c7\'b3\'ca\'b6\'d9\'b8\'e9\'bc\'ad(skip) 2\'b0\'b3\'be\'bf \'c3\'e2\'b7\'c2(limit) 4\'c3\'ca\'b8\'b6\'b4\'d9\
\
\'bd\'c7\'bd\'c03) DTO\'c5\'ac\'b7\'a1\'bd\'ba\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad \'c7\'d8\'ba\'b8\'b1\'e2\
\
- DTO \'c5\'ac\'b7\'a1\'bd\'ba(Store)\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 public\cf0  \cf2 class\cf0  Store \{\
	\cf7 // \'b0\'a1\'b0\'e8\'b9\'f8\'c8\'a3, \'c0\'cc\'b8\'a7, \'b4\'f1\'b1\'db \'bc\'f6\'b8\'a6 \'c0\'fa\'c0\'e5\'c7\'d2 \'ba\'af\'bc\'f6\cf0 \
	\cf2 private\cf0  \cf2 int\cf0  \cf8 num\cf0 ;\
	\cf2 private\cf0  String \cf8 name\cf0 ;\
	\cf2 private\cf0  \cf2 int\cf0  \cf8 replyCnt\cf0 ;\
	\cf2 private\cf0  String \cf8 address\cf0 ;\
	\cf2 public\cf0  \cf2 int\cf0  getNum() \{\cf2 return\cf0  \cf8 num\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setNum(\cf2 int\cf0  \cf3 num\cf0 ) \{\cf2 this\cf0 .\cf8 num\cf0  = \cf3 num\cf0 ;\}\
	\cf2 public\cf0  String getName() \{\cf2 return\cf0  \cf8 name\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setName(String \cf3 name\cf0 ) \{\cf2 this\cf0 .\cf8 name\cf0  = \cf3 name\cf0 ;\}\
	\cf2 public\cf0  \cf2 int\cf0  getReplyCnt() \{\cf2 return\cf0  \cf8 replyCnt\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setReplyCnt(\cf2 int\cf0  \cf3 replyCnt\cf0 ) \{\cf2 this\cf0 .\cf8 replyCnt\cf0  = \cf3 replyCnt\cf0 ;\}\
	\cf2 public\cf0  String getAddress() \{\cf2 return\cf0  \cf8 address\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setAddress(String \cf3 address\cf0 ) \{\cf2 this\cf0 .\cf8 address\cf0  = \cf3 address\cf0 ;\}\
	\cf9 @Override\cf0 \
	\cf2 public\cf0  String toString() \{\
		\cf2 return\cf0  \cf6 "Store [num="\cf0  + \cf8 num\cf0  + \cf6 ", name="\cf0  + \cf8 name\cf0  + \cf6 ", replyCnt="\cf0  + \cf8 replyCnt\cf0  + \cf6 ", address="\cf0  + \cf8 address\cf0  + \cf6 "]"\cf0 ;\
	\}\
	\cf2 public\cf0  Store(\cf2 int\cf0  \cf3 num\cf0 , String \cf3 name\cf0 , \cf2 int\cf0  \cf3 replyCnt\cf0 , String \cf3 address\cf0 ) \{\
		\cf2 super\cf0 ();\
		\cf2 this\cf0 .\cf8 num\cf0  = \cf3 num\cf0 ;\
		\cf2 this\cf0 .\cf8 name\cf0  = \cf3 name\cf0 ;\
		\cf2 this\cf0 .\cf8 replyCnt\cf0  = \cf3 replyCnt\cf0 ;\
		\cf2 this\cf0 .\cf8 address\cf0  = \cf3 address\cf0 ;\
	\}\
	\cf2 public\cf0  Store() \{\
		\cf2 super\cf0 ();\
	\}\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 - main \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'bc\'d2\'c0\'af\'c7\'d1 \'c5\'ac\'b7\'a1\'bd\'ba\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'d8\'bc\'ad \'c5\'d7\'bd\'ba\'c6\'ae(ReduceMain2)\
- filter \'b8\'de\'bc\'d2\'b5\'e5\'c0\'c7 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b4\'c2 1\'b0\'b3\'c0\'cc\'b0\'ed boolean\'c0\'bb \'b8\'ae\'c5\'cf\'c7\'cf\'b4\'c2 \'b6\'f7\'b4\'d9\'bd\'c4\
(\'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6 \'c0\'cc\'b8\'a7) -> \{\
	\'c0\'db\'be\'f7\
	return true \'b6\'c7\'b4\'c2 false;\
\}\
- \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b4\'c2 \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'c7 \'bf\'e4\'bc\'d2\'b0\'a1 \'bc\'f8\'bc\'ad\'b4\'eb\'b7\'ce \'b4\'eb\'c0\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain2 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Store \'b0\'b4\'c3\'bc 4\'b0\'b3\'b8\'a6 \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b9\'e8\'bf\'ad\'c0\'cc \'bb\'fd\'bc\'ba\cf0 \
		Store [] \cf3 ar\cf0  = \cf2 new\cf0  Store[4];\
		\cf3 ar\cf0 [0] = \cf2 new\cf0  Store(1, \cf6 "\'b8\'b8\'ba\'b8\'bc\'ba"\cf0 , 53, \cf6 "\'be\'e7\'c3\'b5\'b1\'b8 \'b8\'f1\'b5\'bf"\cf0 );\
		\cf3 ar\cf0 [1] = \cf2 new\cf0  Store(1, \cf6 "\'c8\'f1\'b7\'a1\'bc\'ba"\cf0 , 23, \cf6 "\'be\'e7\'c3\'b5\'b1\'b8 \'bd\'c5\'c1\'a4\'b5\'bf"\cf0 );\
		\cf3 ar\cf0 [2] = \cf2 new\cf0  Store(1, \cf6 "\'c8\'ab\'ba\'b8\'bc\'ae"\cf0 , 75, \cf6 "\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'bb\'f3\'be\'c6\'be\'c6\'c6\'c4\'c6\'ae\'a1\'b1\cf0 );\
		\cf3 ar\cf0 [3] = \cf2 new\cf0  Store(1, \cf6 "\'b4\'eb\'b8\'ae\'bc\'ae"\cf0 , 17, \cf6 "\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'b7\'d4\'b5\'a5\'be\'c6\'c6\'c4\'c6\'ae\'a1\'b0\cf0 );\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'b0\'a1\'c1\'f6\'b0\'ed \'bd\'ba\'c6\'ae\'b8\'b2 \'bb\'fd\'bc\'ba\cf0 \
		Stream <Store> \cf3 stream\cf0  = Arrays.stream(\cf3 ar\cf0 );\
		\cf3 stream\cf0 .filter((\cf3 store\cf0 )->\{\
			\cf7 //return store.getReplyCnt() < 30;\cf0 \
			\cf2 return\cf0  \cf3 store\cf0 .getAddress().substring(0,3).equals(\cf6 "\'b3\'eb\'bf\'f8\'b1\'b8"\cf0 );\
		\}).forEach(\cf3 store\cf0  -> System.\cf8 out\cf0 .println(\cf3 store\cf0 ));\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'b0\'e1\'b0\'fa3)\
\pard\pardeftab720\partightenfactor0
\cf0 Store [num=1, name=\'c8\'ab\'ba\'b8\'bc\'ae, replyCnt=75, address=\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'bb\'f3\'be\'c6\'be\'c6\'c6\'c4\'c6\'ae]\
Store [num=1, name=\'b4\'eb\'b8\'ae\'bc\'ae, replyCnt=17, address=\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'b7\'d4\'b5\'a5\'be\'c6\'c6\'c4\'c6\'ae]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'bd\'c7\'bd\'c04) \'b5\'bf\'c0\'b8\'b7\'ce \'b1\'b8\'ba\'d0\'c7\'d8\'bc\'ad \'c3\'e2\'b7\'c2\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain2 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Store \'b0\'b4\'c3\'bc 4\'b0\'b3\'b8\'a6 \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b9\'e8\'bf\'ad\'c0\'cc \'bb\'fd\'bc\'ba\cf0 \
		Store [] \cf3 ar\cf0  = \cf2 new\cf0  Store[4];\
		\cf3 ar\cf0 [0] = \cf2 new\cf0  Store(1, \cf6 "\'b8\'b8\'ba\'b8\'bc\'ba"\cf0 , 53, \cf6 "\'be\'e7\'c3\'b5\'b1\'b8 \'b8\'f1\'b5\'bf"\cf0 );\
		\cf3 ar\cf0 [1] = \cf2 new\cf0  Store(1, \cf6 "\'c8\'f1\'b7\'a1\'bc\'ba"\cf0 , 23, \cf6 "\'be\'e7\'c3\'b5\'b1\'b8 \'bd\'c5\'c1\'a4\'b5\'bf"\cf0 );\
		\cf3 ar\cf0 [2] = \cf2 new\cf0  Store(1, \cf6 "\'c8\'ab\'ba\'b8\'bc\'ae"\cf0 , 75, \cf6 "\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'bb\'f3\'be\'c6\'be\'c6\'c6\'c4\'c6\'ae"\cf0 );\
		\cf3 ar\cf0 [3] = \cf2 new\cf0  Store(1, \cf6 "\'b4\'eb\'b8\'ae\'bc\'ae"\cf0 , 17, \cf6 "\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'b7\'d4\'b5\'a5\'be\'c6\'c6\'c4\'c6\'ae"\cf0 );\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'b0\'a1\'c1\'f6\'b0\'ed \'bd\'ba\'c6\'ae\'b8\'b2 \'bb\'fd\'bc\'ba\cf0 \
		Stream <Store> \cf3 stream\cf0  = Arrays.stream(\cf3 ar\cf0 );\
		\cf3 stream\cf0 .filter((\cf3 store\cf0 )->\{\
			\cf7 // \'b5\'bf\'c0\'b8\'b7\'ce \'ba\'d0\'c7\'d2\'c7\'d2 \'b6\'a7\cf0 \
			\cf7 // \'b0\'f8\'b9\'e9\'c0\'bb \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce \'ba\'d0\'c7\'d2\cf0 \
			String [] \cf3 ad\cf0  = \cf3 store\cf0 .getAddress().split(\cf6 " "\cf0 );\
			\cf2 for\cf0 (String \cf3 imsi\cf0  : \cf3 ad\cf0 ) \{\
				\cf7 // "\'c1\'df\'b0\'e8\'b5\'bf"\'c0\'cc \'c0\'d6\'c0\'b8\'b8\'e9 true\'b7\'ce \'c3\'e2\'b7\'c2\'b5\'c7\'b0\'ed \'be\'c6\'b4\'cf\'b8\'e9 false\'b7\'ce \'c3\'e2\'b7\'c2\'c0\'cc \'be\'c8\'b5\'ca\cf0 \
				\cf2 if\cf0 (\cf3 imsi\cf0 .equals(\cf6 "\'c1\'df\'b0\'e8\'b5\'bf"\cf0 )) \{\
					\cf2 return\cf0  \cf2 true\cf0 ;\
				\}\
			\}\
			\cf2 return\cf0  \cf2 false\cf0 ;\
		\}).forEach(\cf3 store\cf0  -> System.\cf8 out\cf0 .println(\cf3 store\cf0 ));\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'b0\'e1\'b0\'fa)\
\pard\pardeftab720\partightenfactor0
\cf0 Store [num=1, name=\'c8\'ab\'ba\'b8\'bc\'ae, replyCnt=75, address=\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'bb\'f3\'be\'c6\'be\'c6\'c6\'c4\'c6\'ae]\
Store [num=1, name=\'b4\'eb\'b8\'ae\'bc\'ae, replyCnt=17, address=\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'b7\'d4\'b5\'a5\'be\'c6\'c6\'c4\'c6\'ae]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'bd\'c7\'bd\'c05) \'b5\'bf\'c0\'b8\'b7\'ce \'b1\'b8\'ba\'d0\'c7\'d8\'bc\'ad \'c3\'e2\'b7\'c2\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain2 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Store \'b0\'b4\'c3\'bc 4\'b0\'b3\'b8\'a6 \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b9\'e8\'bf\'ad\'c0\'cc \'bb\'fd\'bc\'ba\cf0 \
		Store [] \cf3 ar\cf0  = \cf2 new\cf0  Store[4];\
		\cf3 ar\cf0 [0] = \cf2 new\cf0  Store(1, \cf6 "\'b8\'b8\'ba\'b8\'bc\'ba"\cf0 , 53, \cf6 "\'be\'e7\'c3\'b5\'b1\'b8 \'b8\'f1\'b5\'bf"\cf0 );\
		\cf3 ar\cf0 [1] = \cf2 new\cf0  Store(1, \cf6 "\'c8\'f1\'b7\'a1\'bc\'ba"\cf0 , 23, \cf6 "\'be\'e7\'c3\'b5\'b1\'b8 \'bd\'c5\'c1\'a4\'b5\'bf"\cf0 );\
		\cf3 ar\cf0 [2] = \cf2 new\cf0  Store(1, \cf6 "\'c8\'ab\'ba\'b8\'bc\'ae"\cf0 , 75, \cf6 "\'bc\'ad\'bf\'ef\'bd\'c3 \'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'bb\'f3\'be\'c6\'be\'c6\'c6\'c4\'c6\'ae"\cf0 );\
		\cf3 ar\cf0 [3] = \cf2 new\cf0  Store(1, \cf6 "\'b4\'eb\'b8\'ae\'bc\'ae"\cf0 , 17, \cf6 "\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'b7\'d4\'b5\'a5\'be\'c6\'c6\'c4\'c6\'ae"\cf0 );\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'b0\'a1\'c1\'f6\'b0\'ed \'bd\'ba\'c6\'ae\'b8\'b2 \'bb\'fd\'bc\'ba\cf0 \
		Stream <Store> \cf3 stream\cf0  = Arrays.stream(\cf3 ar\cf0 );\
		\cf3 stream\cf0 .filter((\cf3 store\cf0 )->\{\
			\cf7 // \'b5\'bf\'c0\'b8\'b7\'ce \'ba\'d0\'c7\'d2\'c7\'d2 \'b6\'a7\cf0 \
			\cf7 // \'b0\'f8\'b9\'e9\'c0\'bb \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce \'ba\'d0\'c7\'d2\cf0 \
			String [] \cf3 ad\cf0  = \cf3 store\cf0 .getAddress().split(\cf6 " "\cf0 );\
			\cf2 if\cf0 (\cf3 ad\cf0 [1].equals(\cf6 "\'c1\'df\'b0\'e8\'b5\'bf"\cf0 )) \{\
				\cf2 return\cf0  \cf2 true\cf0 ;\
			\}\
			\cf2 return\cf0  \cf2 false\cf0 ;\
		\}).forEach(\cf3 store\cf0  -> System.\cf8 out\cf0 .println(\cf3 store\cf0 ));\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'b0\'e1\'b0\'fa5)\
\pard\pardeftab720\partightenfactor0
\cf0 Store [num=1, name=\'b4\'eb\'b8\'ae\'bc\'ae, replyCnt=17, address=\'b3\'eb\'bf\'f8\'b1\'b8 \'c1\'df\'b0\'e8\'b5\'bf \'b7\'d4\'b5\'a5\'be\'c6\'c6\'c4\'c6\'ae]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
** \'b5\'a5\'c0\'cc\'c5\'cd \'c1\'a4\'b7\'c4(sort)\
\
- \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c1\'a4\'b7\'c4\'c0\'bb \'c7\'d2\'b7\'c1\'b8\'e9 \'c5\'a9\'b1\'e2 \'ba\'f1\'b1\'b3\'b0\'a1 \'b0\'a1\'b4\'c9\'c7\'d8\'be\'df \'c7\'d5\'b4\'cf\'b4\'d9.\
- >, >=, <, <=\'bf\'cd \'b0\'b0\'c0\'ba \'bf\'ac\'bb\'ea\'c0\'da\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad \'ba\'f1\'b1\'b3\'b0\'a1\'b4\'c9\'c7\'cf\'b0\'c5\'b3\'aa \'bb\'ac\'bc\'c0\'c0\'bb \'c7\'d2 \'bc\'f6 \'c0\'d6\'be\'ee\'be\'df \'c7\'d5\'b4\'cf\'b4\'d9.\
- \'bc\'fd\'c0\'da \'b5\'a5\'c0\'cc\'c5\'cd\'b4\'c2 \'c5\'a9\'b1\'e2\'b9\'e8\'b0\'ed\'b5\'b5 \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'ed \'bb\'ac\'bc\'c0\'b5\'b5 \'b0\'a1\'b4\'c9\'c7\'cf\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 \'c1\'a4\'b7\'c4\'c0\'bb \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\
\
- \'bc\'fd\'c0\'da \'c0\'cc\'bf\'dc\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd\'b4\'c2 \'c5\'a9\'b1\'e2\'ba\'f1\'b1\'b3 \'bf\'ac\'bb\'ea\'c0\'cc\'b3\'aa \'bb\'ac\'bc\'c0\'c0\'cc \'be\'c8\'b5\'c7\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 \'c1\'a4\'b7\'c4\'c0\'cc \'be\'c8\'b5\'cb\'b4\'cf\'b4\'d9.\
- \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6\'be\'f0\'be\'ee\'c0\'c7 \'c1\'be\'b7\'f9\'bf\'a1 \'b5\'fb\'b6\'f3 \'b5\'c7\'b4\'c2 \'b0\'e6\'bf\'ec\'b5\'b5 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\
\
- \'bc\'fd\'c0\'da\'b0\'a1 \'be\'c6\'b4\'d1 \'b0\'e6\'bf\'ec\'b4\'c2 \'c5\'a9\'b1\'e2\'ba\'f1\'b1\'b3\'b8\'a6 \'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'b8\'b8\'b5\'e9\'be\'ee \'c1\'d6\'be\'ee\'be\'df \'c7\'d5\'b4\'cf\'b4\'d9.\
\
1. Comparable\
\
- java\'bf\'a1\'bc\'ad\'b4\'c2 \'c5\'ac\'b7\'a1\'bd\'ba \'be\'c8\'bf\'a1 Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'cf\'b0\'ed int compareTo(<T>other) \'b6\'f3\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9\'c7\'d8\'bc\'ad\
\'c5\'a9\'b1\'e2 \'ba\'f1\'b1\'b3\'b8\'a6 \'c7\'d2 \'bc\'f6 \'c0\'d6\'b5\'b5\'b7\'cf \'c7\'d2 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\
- \'c0\'cc \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'bf\'c0\'b9\'f6\'b6\'f3\'c0\'cc\'b5\'f9 \'c7\'d2 \'b6\'a7\'b4\'c2 \'be\'e7\'bc\'f6\'b0\'a1 \'b8\'ae\'c5\'cf\'b5\'c7\'b8\'e9 \'ba\'f1\'b1\'b3\'c7\'cf\'b4\'c2 \'b0\'b4\'c3\'bc\'b0\'a1 \'c5\'a9\'b4\'d9\'b4\'c2 \'c0\'c7\'b9\'cc\'c0\'cc\'b0\'ed\
\'c0\'bd\'bc\'f6\'b8\'a6 \'b8\'ae\'c5\'cf\'c7\'cf\'b8\'e9 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b7\'ce \'b4\'eb\'c0\'d4\'b5\'c8 \'ba\'f1\'b1\'b3\'b4\'e7\'c7\'cf\'b4\'c2 \'b0\'b4\'c3\'bc\'b0\'a1 \'c5\'a9\'b4\'d9\'b6\'f3\'b4\'c2 \'c0\'c7\'b9\'cc\'c0\'d4\'b4\'cf\'b4\'d9.\
\
2. Comparator\
\
- Comparator \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d1 \'c5\'ac\'b7\'a1\'bd\'ba\'b8\'a6 \'bb\'fd\'bc\'ba\'c7\'cf\'b0\'ed \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d8\'c1\'d6\'b8\'e9 \'b5\'cb\'b4\'cf\'b4\'d9.\
- \'c0\'cc \'b6\'a7 \'b8\'de\'bc\'d2\'b5\'e5\'b4\'c2 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b0\'a1 2\'b0\'b3 \'c0\'cc\'b0\'ed \'be\'e7\'bc\'f6\'b8\'a6 \'b8\'ae\'c5\'cf\'c7\'cf\'b8\'e9 \'c3\'b9\'b9\'f8\'c2\'b0 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b7\'ce \'b4\'eb\'c0\'d4\'b5\'c8 \'b5\'a5\'c0\'cc\'c5\'cd\'b0\'a1 \'c5\'a9\'b4\'d9\'b4\'c2 \'c0\'c7\'b9\'cc\'c0\'cc\'b0\'ed\
\'c0\'bd\'bc\'f6\'b8\'a6 \'b8\'ae\'c5\'cf\'c7\'cf\'b8\'e9 \'b5\'ce\'b9\'f8\'c2\'b0 \'b5\'a5\'c0\'cc\'c5\'cd\'b0\'a1 \'c5\'a9\'b4\'d9\'b4\'c2 \'c0\'c7\'b9\'cc\'c0\'d4\'b4\'cf\'b4\'d9.\
\
3. Stream Comparable\
\
- Stream\'bf\'a1\'bc\'ad Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 implements \'c7\'d1 \'b0\'b4\'c3\'bc\'c0\'c7 \'b0\'e6\'bf\'ec\'bf\'a1\'b4\'c2 sorted()\'b8\'a6 \'c8\'a3\'c3\'e2\'c7\'cf\'b8\'e9\
\'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\'c0\'bb \'c7\'d8\'c1\'d6\'b0\'ed \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b7\'ce Comparator.reversOrder()\'b8\'a6 \'b4\'eb\'c0\'d4\'c7\'cf\'b8\'e9 \'b3\'bb\'b8\'b2\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\'c0\'bb \'c7\'d8\'c1\'dd\'b4\'cf\'b4\'d9.\
- Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 implements \'c7\'cf\'c1\'f6 \'be\'ca\'c0\'ba \'b0\'b4\'c3\'bc\'c0\'c7 \'b0\'e6\'bf\'ec\'bf\'a1\'b4\'c2 sorted \'b8\'de\'bc\'d2\'b5\'e5\'bf\'a1 Comparator \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d1\
\'b0\'b4\'c3\'bc\'b8\'a6 \'b4\'eb\'c0\'d4\'c7\'d8\'be\'df\'c7\'d5\'b4\'cf\'b4\'d9.\
\
\'bd\'c7\'bd\'c01) \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'bb \'c0\'cc\'bf\'eb\'c7\'d1 \'c1\'a4\'b7\'c4(DTO \'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1 Comparable \'b8\'de\'bc\'d2\'b5\'e5 \'b1\'b8\'c7\'f6)\
\
- \'bd\'c7\'bd\'c0\'c0\'bb \'c0\'a7\'c7\'d8 \'bb\'e7\'bf\'eb\'c7\'d2 DTO \'c5\'ac\'b7\'a1\'bd\'ba\'b8\'a6 \'bb\'fd\'bc\'ba\
- \'b9\'f8\'c8\'a3 : \'c1\'a4\'bc\'f6\'b7\'ce num\
- \'c0\'cc\'b8\'a7 : \'b9\'ae\'c0\'da\'bf\'ad\'b7\'ce name\
- \'bc\'ba\'ba\'b0 : \'b9\'ae\'c0\'da\'bf\'ad\'b7\'ce \'b3\'b2\'c0\'da \'b6\'c7\'b4\'c2 \'bf\'a9\'c0\'da\'b8\'a6 \'b0\'ae\'b4\'c2\'b5\'a5 gender(\'c0\'cc\'b7\'b8\'b0\'d4 \'c6\'af\'c1\'a4\'c7\'d1 \'b0\'aa\'b8\'b8\'c0\'bb \'b0\'ae\'b4\'c2 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'bb \'b9\'fc\'c1\'d6\'c7\'fc\'c0\'cc\'b6\'f3\'b0\'ed \'c7\'d5\'b4\'cf\'b4\'d9.)\
- \'c1\'a1\'bc\'f6 : \'c1\'a4\'bc\'f6\'b7\'ce score\
\
- DTO Class\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 public\cf0  \cf2 class\cf0  Student \cf2 implements\cf0  \ul Comparable\ulnone \{\
	\cf2 private\cf0  \cf2 int\cf0  \cf8 num\cf0 ;\
	\cf2 private\cf0  String \cf8 name\cf0 ;\
	\cf2 private\cf0  String \cf8 gender\cf0 ;\
	\cf2 private\cf0  \cf2 int\cf0  \cf8 score\cf0 ;\
	\cf2 public\cf0  \cf2 int\cf0  getNum() \{\cf2 return\cf0  \cf8 num\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setNum(\cf2 int\cf0  \cf3 num\cf0 ) \{\cf2 this\cf0 .\cf8 num\cf0  = \cf3 num\cf0 ;\}\
	\cf2 public\cf0  String getName() \{\cf2 return\cf0  \cf8 name\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setName(String \cf3 name\cf0 ) \{\cf2 this\cf0 .\cf8 name\cf0  = \cf3 name\cf0 ;\}\
	\cf2 public\cf0  String getGender() \{\cf2 return\cf0  \cf8 gender\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setGender(String \cf3 gender\cf0 ) \{\cf2 this\cf0 .\cf8 gender\cf0  = \cf3 gender\cf0 ;\}\
	\cf2 public\cf0  \cf2 int\cf0  getScore() \{\cf2 return\cf0  \cf8 score\cf0 ;\}\
	\cf2 public\cf0  \cf2 void\cf0  setScore(\cf2 int\cf0  \cf3 score\cf0 ) \{\cf2 this\cf0 .\cf8 score\cf0  = \cf3 score\cf0 ;\}\
	\cf9 @Override\cf0 \
	\cf2 public\cf0  String toString() \{\
		\cf2 return\cf0  \cf6 "Student [num="\cf0  + \cf8 num\cf0  + \cf6 ", name="\cf0  + \cf8 name\cf0  + \cf6 ", gender="\cf0  + \cf8 gender\cf0  + \cf6 ", score="\cf0  + \cf8 score\cf0  + \cf6 "]"\cf0 ;\
	\}\
	\cf2 public\cf0  Student(\cf2 int\cf0  \cf3 num\cf0 , String \cf3 name\cf0 , String \cf3 gender\cf0 , \cf2 int\cf0  \cf3 score\cf0 ) \{\
		\cf2 super\cf0 ();\
		\cf2 this\cf0 .\cf8 num\cf0  = \cf3 num\cf0 ;\
		\cf2 this\cf0 .\cf8 name\cf0  = \cf3 name\cf0 ;\
		\cf2 this\cf0 .\cf8 gender\cf0  = \cf3 gender\cf0 ;\
		\cf2 this\cf0 .\cf8 score\cf0  = \cf3 score\cf0 ;\
	\}\
	\cf2 public\cf0  Student() \{\
		\cf2 super\cf0 ();\
	\}\
	\cf9 @Override\cf0 \
	\cf2 public\cf0  \cf2 int\cf0  compareTo(Object \cf3 o\cf0 ) \{\
		\cf7 // \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b4\'c2 \'c0\'da\'bd\'c5\'c0\'c7 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'b8\'b7\'ce \'c7\'fc \'ba\'af\'c8\'af\'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb\cf0 \
		Student \cf3 other\cf0  = (Student)\cf3 o\cf0 ;\
		\cf7 // \'bc\'fd\'c0\'da \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\cf0 \
		\cf7 // return this.score - other.score;\cf0 \
		\
		\cf7 // \'c0\'cc\'b8\'a7 \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\cf0 \
		\cf2 return\cf0  \cf2 this\cf0 .\cf8 name\cf0 .compareTo(\cf3 other\cf0 .\cf8 name\cf0 );\
	\}\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 - ReduceMain3\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain3 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		String [] \cf3 ar\cf0  = \{\cf6 "C&C++"\cf0 , \cf6 "Java"\cf0 , \cf6 "C#"\cf0 , \cf6 "JSP"\cf0 , \cf6 "Python"\cf0 , \cf6 "R"\cf0 , \cf6 "Swift"\cf0 , \cf6 "Kotlin"\cf0 ,\
				\cf6 "SQL"\cf0 , \cf6 "Haskell"\cf0 , \cf6 "Closure"\cf0 , \cf6 "Scala"\cf0 , \cf6 "Ruby"\cf0 , \cf6 "Php"\cf0 \};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'b0\'a1\'c1\'f6\'b0\'ed \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Stream <String> \cf3 \ul \ulc3 stream\cf0 \ulnone  = Arrays.stream(\cf3 ar\cf0 );\
		\cf4 /** \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\cf0 \
\cf4 		// String \'c5\'ac\'b7\'a1\'bd\'ba\'b4\'c2 Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 implements\'c7\'d8\'bc\'ad \'c1\'a4\'b7\'c4\'c0\'cc \'b0\'a1\'b4\'c9\cf0 \
\cf4 		stream.sorted().forEach(\cf4 \ul \ulc4 lang\cf5 \ulnone ->\cf4 System.out.println(\cf4 \ul \ulc4 lang\cf4 \ulnone ));\cf0 \
\cf4 		**/\cf0 \
		\
		\cf4 /**\cf0 \
\cf4 		// \'b3\'bb\'b8\'b2\'c2\'f7\'bc\'f8 \'c1\'a4\'b7\'c4\cf0 \
\cf4 		stream.sorted(Comparator.reverseOrder()).forEach(\cf4 \ul \ulc4 lang\cf5 \ulnone ->\cf4 System.out.println(\cf4 \ul \ulc4 lang\cf4 \ulnone ));\cf0 \
\cf4 		**/\cf0 \
		\
		\cf7 // Student\'c0\'c7 \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Student [] \cf3 students\cf0  = \{\
				\cf2 new\cf0  Student(1, \cf6 "\'be\'c6\'c0\'cc\'b8\'b0"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
				\cf2 new\cf0  Student(2, \cf6 "\'c2\'f7\'b9\'fc\'b1\'d9"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 88),\
				\cf2 new\cf0  Student(3, \cf6 "\'b9\'da\'c1\'a4\'bc\'f7"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 93),\
				\cf2 new\cf0  Student(4, \cf6 "\'c0\'cc\'c1\'be\'b9\'fc"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 91),\
				\cf2 new\cf0  Student(5, \cf6 "\'bc\'b1\'b5\'bf\'b7\'c4"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 76),\
				\cf2 new\cf0  Student(6, \cf6 "\'ba\'b8\'be\'c6"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 92)\
		\};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'b8\'b7\'ce \'bb\'fd\'bc\'ba\cf0 \
		Stream <Student> \cf3 st\cf0  = Arrays.stream(\cf3 students\cf0 );\
		\cf7 // \'c0\'cc \'c7\'fc\'c5\'c2\'b8\'a6 \'bf\'b9\'bf\'dc \'be\'f8\'c0\'cc \'bb\'e7\'bf\'eb\'c7\'cf\'b0\'ed\'c0\'da \'c7\'cf\'b8\'e9 Student \'c5\'ac\'b7\'a1\'bd\'ba\'bf\'a1 Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'b1\'b8\'c7\'f6 \'c7\'d8\'be\'df \'c7\'d4\cf0 \
		\cf3 st\cf0 .sorted().forEach(\cf3 student\cf0  -> System.\cf8 out\cf0 .println(\cf3 student\cf0 ));\
	\}\
\}\
\'b0\'e1\'b0\'fa)\
Student [num=3, name=\'b9\'da\'c1\'a4\'bc\'f7, gender=\'bf\'a9\'c0\'da, score=93]\
Student [num=6, name=\'ba\'b8\'be\'c6, gender=\'bf\'a9\'c0\'da, score=92]\
Student [num=5, name=\'bc\'b1\'b5\'bf\'b7\'c4, gender=\'b3\'b2\'c0\'da, score=76]\
Student [num=1, name=\'be\'c6\'c0\'cc\'b8\'b0, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=4, name=\'c0\'cc\'c1\'be\'b9\'fc, gender=\'b3\'b2\'c0\'da, score=91]\
Student [num=2, name=\'c2\'f7\'b9\'fc\'b1\'d9, gender=\'b3\'b2\'c0\'da, score=88]\
\
\pard\pardeftab720\partightenfactor0
\cf10 Exception in thread "main" \cf11 \ul \ulc11 java.lang.ClassCastException\cf10 \ulnone : com.naver.choch92.stream.Student cannot be cast to java.lang.Comparable\cf0 \
- \'c0\'cc\'b7\'b1 \'c7\'fc\'c5\'c2\'c0\'c7 \'bf\'b9\'bf\'dc \'b8\'de\'bd\'c3\'c1\'f6\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'cf\'b8\'e9 \'c7\'fc \'ba\'af\'c8\'af \'bf\'b9\'bf\'dc \'b8\'de\'bd\'c3\'c1\'f6\'c0\'ce\'b5\'a5 \'b0\'a1\'c0\'e5 \'b8\'b6\'c1\'f6\'b8\'b7\'bf\'a1 \'b3\'aa\'bf\'c2 \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6\
\'b1\'b8\'c7\'f6\'c7\'cf\'c1\'f6 \'be\'ca\'be\'d2\'b4\'d9\'b4\'c2 \'b8\'de\'bd\'c3\'c1\'f6\
\pard\pardeftab720\partightenfactor0
\cf0 \
\'bd\'c7\'bd\'c02) \'c0\'a7\'bf\'a1 \'bc\'d2\'bd\'ba\'bf\'a1\'bc\'ad \'bc\'f6\'c1\'a4\'c7\'cf\'b1\'e2(Comparator.comparing \'b1\'b8\'c7\'f6)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 => \'b4\'dc\'bc\'f8\'c7\'cf\'b0\'d4 Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'cf\'b4\'c2 \'c7\'fc\'c5\'c2\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'cf\'b4\'c2 \'b9\'e6\'b9\'fd\'c0\'ba 1\'b0\'a1\'c1\'f6 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce\'b8\'b8 \'c1\'a4\'b7\'c4\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\
=> \'b5\'bf\'c0\'fb\'c0\'b8\'b7\'ce \'c1\'a4\'b7\'c4 \'b1\'e2\'c1\'d8\'c0\'bb \'ba\'af\'b0\'e6\'c7\'d2\'b7\'c1\'b8\'e9 Comparable \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'cc \'be\'c6\'b4\'cf\'b0\'ed sorted() \'b8\'de\'bc\'d2\'b5\'e5\'bf\'a1\
\'c1\'a4\'b7\'c4\'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce \'b5\'bf\'c0\'fb\'c0\'b8\'b7\'ce \'b4\'eb\'c0\'d4\'c7\'cf\'b8\'e9 \'b5\'cb\'b4\'cf\'b4\'d9.\
\
=> \'c7\'cf\'b3\'aa\'c0\'c7 \'b9\'e6\'b9\'fd\'c0\'ba Comparator.comparing(\'c5\'ac\'b7\'a1\'bd\'ba\'c0\'cc\'b8\'a7::\'ba\'f1\'b1\'b3\'c7\'d2\'b8\'de\'bc\'d2\'b5\'e5\'c0\'cc\'b8\'a7)\'c0\'bb \'b4\'eb\'c0\'d4\'c7\'cf\'b0\'ed \
\'b3\'bb\'b8\'b2\'c2\'f7\'bc\'f8\'c0\'b8\'b7\'ce \'c7\'cf\'b0\'ed\'c0\'da \'c7\'cf\'b8\'e9 .reversed\'b8\'a6 \'bf\'ac\'bc\'d3\'c7\'d8\'bc\'ad \'c8\'a3\'c3\'e2\
=> \'b5\'bf\'c0\'cf\'c7\'d1 \'b0\'aa\'c0\'cf \'b6\'a7 \'b4\'d9\'b8\'a5 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce \'c3\'df\'b0\'a1\'c7\'cf\'b0\'ed\'c0\'da \'c7\'cf\'b8\'e9 .thenComparing(\'c5\'ac\'b7\'a1\'bd\'ba\'c0\'cc\'b8\'a7::\'b8\'de\'bc\'d2\'b5\'e5\'c0\'cc\'b8\'a7)\'c0\'bb \'c8\'a3\'c3\'e2\'c7\'cf\'b8\'e9 \'b5\'cb\'b4\'cf\'b4\'d9.\
=> \'c0\'cc \'b6\'a7 \'bf\'ac\'bc\'d3\'c7\'d8\'bc\'ad reversed()\'b8\'a6 \'c0\'fb\'bf\'eb\'c7\'d2 \'bc\'f6 \'be\'f8\'bd\'c0\'b4\'cf\'b4\'d9.\
=> \'c0\'cc \'b6\'a7\'b4\'c2 thenComparing\'bf\'a1 \'b4\'d9\'bd\'c3 Comparator.comparing()\'c0\'bb \'b8\'b8\'b5\'e9\'be\'ee\'bc\'ad \'b4\'eb\'c0\'d4\'c7\'d8\'be\'df \'c7\'d5\'b4\'cf\'b4\'d9.\
\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.Comparator;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain4 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Student\'c0\'c7 \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Student [] \cf3 students\cf0  = \{\
			\cf2 new\cf0  Student(1, \cf6 "\'be\'c6\'c0\'cc\'b8\'b0"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(2, \cf6 "\'c2\'f7\'b9\'fc\'b1\'d9"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 88),\
			\cf2 new\cf0  Student(3, \cf6 "\'b9\'da\'c1\'a4\'bc\'f7"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(4, \cf6 "\'c0\'cc\'c1\'be\'b9\'fc"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 91),\
			\cf2 new\cf0  Student(5, \cf6 "\'bc\'b1\'b5\'bf\'b7\'c4"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 76),\
			\cf2 new\cf0  Student(6, \cf6 "\'ba\'b8\'be\'c6"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 92)\
		\};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'b8\'b7\'ce \'bb\'fd\'bc\'ba\cf0 \
		Stream <Student> \cf3 st\cf0  = Arrays.stream(\cf3 students\cf0 );\
		\cf7 // Comparator \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d1 \'c1\'a4\'b7\'c4\
		// .reversed\'b8\'a6 \'bb\'fd\'b7\'ab\'c7\'cf\'b8\'e9 \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8\
		// score\'b0\'a1 \'b0\'b0\'c0\'b8\'b8\'e9 \'c0\'cc\'b8\'a7\'c0\'c7 \'bf\'c0\'b8\'a7\'c2\'f7\'bc\'f8\cf0 \
		\cf3 st\cf0 .sorted(Comparator.comparing(Student::getScore).reversed()\
				.thenComparing(Comparator.comparing(Student::getName).reversed()))\
				.forEach(\cf3 student\cf0  -> System.\cf8 out\cf0 .println(\cf3 student\cf0 ));\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'b0\'e1\'b0\'fa)\
\pard\pardeftab720\partightenfactor0
\cf0 Student [num=6, name=\'ba\'b8\'be\'c6, gender=\'bf\'a9\'c0\'da, score=92]\
Student [num=4, name=\'c0\'cc\'c1\'be\'b9\'fc, gender=\'b3\'b2\'c0\'da, score=91]\
Student [num=1, name=\'be\'c6\'c0\'cc\'b8\'b0, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=3, name=\'b9\'da\'c1\'a4\'bc\'f7, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=2, name=\'c2\'f7\'b9\'fc\'b1\'d9, gender=\'b3\'b2\'c0\'da, score=88]\
Student [num=5, name=\'bc\'b1\'b5\'bf\'b7\'c4, gender=\'b3\'b2\'c0\'da, score=76]\
\
\'bd\'c7\'bd\'c03) \'c0\'a7\'bf\'a1 \'bc\'d2\'bd\'ba \'bc\'f6\'c1\'a4\'c7\'cf\'b1\'e2(Comparator \'c1\'f7\'c1\'a2 \'bb\'fd\'bc\'ba \'b1\'b8\'c7\'f6)\
\
=> \'b4\'d9\'b8\'a5 \'c7\'cf\'b3\'aa\'c0\'c7 \'b9\'e6\'b9\'fd\'c0\'ba Comparator \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 \'b1\'b8\'c7\'f6\'c7\'d1 \'b0\'b4\'c3\'bc\'b8\'a6 \'c1\'f7\'c1\'a2 \'b4\'eb\'c0\'d4\'c7\'cf\'b4\'c2 \'b0\'cd \'c0\'d4\'b4\'cf\'b4\'d9.\
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.Comparator;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain5 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Student\'c0\'c7 \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Student [] \cf3 students\cf0  = \{\
			\cf2 new\cf0  Student(1, \cf6 "\'be\'c6\'c0\'cc\'b8\'b0"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(2, \cf6 "\'c2\'f7\'b9\'fc\'b1\'d9"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 88),\
			\cf2 new\cf0  Student(3, \cf6 "\'b9\'da\'c1\'a4\'bc\'f7"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(4, \cf6 "\'c0\'cc\'c1\'be\'b9\'fc"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 91),\
			\cf2 new\cf0  Student(5, \cf6 "\'bc\'b1\'b5\'bf\'b7\'c4"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 76),\
			\cf2 new\cf0  Student(6, \cf6 "\'ba\'b8\'be\'c6"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 92)\
		\};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'b8\'b7\'ce \'bb\'fd\'bc\'ba\cf0 \
		Stream <Student> \cf3 st\cf0  = Arrays.stream(\cf3 students\cf0 );\
		\cf7 // Comparator \'b0\'b4\'c3\'bc \'c1\'f7\'c1\'a2 \'bb\'fd\'bc\'ba\cf0 \
		Comparator<Student> \cf3 comp\cf0  = \cf2 new\cf0  Comparator<Student>() \{\
			\cf9 @Override\cf0 \
			\cf2 public\cf0  \cf2 int\cf0  compare(Student \cf3 o1\cf0 , Student \cf3 o2\cf0 ) \{\
				\cf2 if\cf0 (\cf3 o1\cf0 .getScore() > \cf3 o2\cf0 .getScore()) \{\
					\cf2 return\cf0  1;\
				\}\cf2 else\cf0  \cf2 if\cf0 (\cf3 o1\cf0 .getScore() == \cf3 o2\cf0 .getScore()) \{\
					\cf2 return\cf0  \cf3 o2\cf0 .getName().compareTo(\cf3 o1\cf0 .getName());\
				\}\cf2 else\cf0  \{\
					\cf2 return\cf0  -1;\
				\}\
			\}			\
		\};\
		\cf3 st\cf0 .sorted(\cf3 comp\cf0 ).forEach(\cf3 student\cf0  -> System.\cf8 out\cf0 .println(\cf3 student\cf0 ));\
	\}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf0 \'b0\'e1\'b0\'fa)\
\pard\pardeftab720\partightenfactor0
\cf0 Student [num=5, name=\'bc\'b1\'b5\'bf\'b7\'c4, gender=\'b3\'b2\'c0\'da, score=76]\
Student [num=2, name=\'c2\'f7\'b9\'fc\'b1\'d9, gender=\'b3\'b2\'c0\'da, score=88]\
Student [num=1, name=\'be\'c6\'c0\'cc\'b8\'b0, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=3, name=\'b9\'da\'c1\'a4\'bc\'f7, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=4, name=\'c0\'cc\'c1\'be\'b9\'fc, gender=\'b3\'b2\'c0\'da, score=91]\
Student [num=6, name=\'ba\'b8\'be\'c6, gender=\'bf\'a9\'c0\'da, score=92]\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 - map \'c1\'df\'b0\'a3 \'bf\'ac\'bb\'ea\
\
=> mapping\'c0\'c7 \'be\'e0\'c0\'da\'b7\'ce \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'ba\'af\'c8\'af\'c7\'d8\'c1\'d6\'b4\'c2 \'bf\'ac\'bb\'ea\
=> mapTo\'c0\'da\'b7\'e1\'c7\'fc(\'b8\'de\'bc\'d2\'b5\'e5)\'b8\'a6 \'bc\'b3\'c1\'a4\'c7\'cf\'b8\'e9 \'bf\'f8\'b7\'a1\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd\'b0\'a1 \'b8\'de\'bc\'d2\'b5\'e5\'b0\'a1 \'b9\'dd\'c8\'af\'c7\'cf\'b4\'c2 \'b0\'aa\'c0\'b8\'b7\'ce \'ba\'af\'b0\'e6\'b5\'cb\'b4\'cf\'b4\'d9.\
\
\'bd\'c7\'bd\'c0)\
- \'b8\'b8\'c0\'cf Student\'bf\'a1\'bc\'ad score\'b0\'aa\'b8\'b8 \'bb\'e7\'bf\'eb\'c7\'cf\'b4\'c2 \'b0\'e6\'bf\'ec\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'df\'c0\'bb \'b6\'a7 Student\'bf\'a1\'bc\'ad score\'b8\'b8 \'b2\'a8\'b3\'bb\'bc\'ad \'b4\'d9\'b8\'a5 \'b9\'e8\'bf\'ad\'c0\'cc\'b3\'aa List\'bf\'a1\
\'c0\'fa\'c0\'e5\'c7\'cf\'b4\'c2 \'b0\'cd\'c0\'ba \'c0\'da\'bf\'f8\'c0\'c7 \'b3\'b6\'ba\'f1\'b0\'a1 \'b5\'c9 \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\
- \'c7\'ca\'bf\'e4\'c7\'cf\'b4\'d9\'b8\'e9 Student\'c0\'c7 \'b5\'a5\'c0\'cc\'c5\'cd \'c1\'df\'bf\'a1\'bc\'ad score\'bf\'a1 \'b8\'b8 \'c1\'a2\'b1\'d9\'c7\'d8\'bc\'ad \'c0\'db\'be\'f7\'c0\'bb \'bc\'f6\'c7\'e0\'c7\'cf\'b5\'b5\'b7\'cf \'c7\'d8\'c1\'d6\'b8\'e9 \'b8\'de\'b8\'f0\'b8\'ae \'b3\'b6\'ba\'f1\'b8\'a6 \'c1\'d9\'c0\'cf \'bc\'f6 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.\
\
- mapToInt(Student::getScore)\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\cf2 public\cf0  \cf2 class\cf0  ReduceMain6 \{\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Student\'c0\'c7 \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Student [] \cf3 students\cf0  = \{\
			\cf2 new\cf0  Student(1, \cf6 "\'be\'c6\'c0\'cc\'b8\'b0"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(2, \cf6 "\'c2\'f7\'b9\'fc\'b1\'d9"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 88),\
			\cf2 new\cf0  Student(3, \cf6 "\'b9\'da\'c1\'a4\'bc\'f7"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(4, \cf6 "\'c0\'cc\'c1\'be\'b9\'fc"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 91),\
			\cf2 new\cf0  Student(5, \cf6 "\'bc\'b1\'b5\'bf\'b7\'c4"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 76),\
			\cf2 new\cf0  Student(6, \cf6 "\'ba\'b8\'be\'c6"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 92)\
		\};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'b8\'b7\'ce \'bb\'fd\'bc\'ba\cf0 \
		Stream <Student> \cf3 st\cf0  = Arrays.stream(\cf3 students\cf0 );\
		\cf3 st\cf0 .mapToInt(Student::getScore).forEach(\cf3 score\cf0 ->System.\cf8 out\cf0 .println(\cf3 score\cf0 ));\
	\}\
\}\
\
\'b0\'e1\'b0\'fa)\
90\
88\
90\
91\
76\
92\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
- \'c1\'df\'b0\'a3\'bf\'ac\'bb\'ea\'bf\'a1\'bc\'ad \'c1\'df\'bf\'e4\'c7\'d1 \'bf\'ac\'bb\'ea - \'b5\'a5\'c0\'cc\'c5\'cd \'b0\'a1\'b0\'f8 \'b6\'c7\'b4\'c2 \'c0\'fc\'c3\'b3\'b8\'ae\
map : \'b5\'a5\'c0\'cc\'c5\'cd \'ba\'af\'c8\'af\
filter : \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b0\'f1\'b6\'f3\'b3\'bb\'b4\'c2 \'b0\'cd\
sort : \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c1\'a4\'b7\'c4\'c7\'cf\'b4\'c2 \'b0\'cd\
skip : \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b0\'c7\'b3\'ca\'b6\'d9\'b4\'c2 \'b0\'cd\
limit : \'bf\'f8\'c7\'cf\'b4\'c2 \'b0\'b3\'bc\'f6\'b8\'b8\'c5\'ad \'b0\'f1\'b6\'f3\'b3\'bb\'b4\'c2 \'b0\'cd\
\
- \'c1\'df\'b0\'a3 \'bf\'ac\'bb\'ea\'c0\'ba \'bf\'ac\'bc\'d3\'c7\'d8\'bc\'ad \'bc\'f6\'c7\'e0\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\
- \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'b8\'b7\'ce skip \'b0\'fa limit\'b0\'a1 \'b8\'b6\'c1\'f6\'b8\'b7\'c0\'cc \'b5\'c9 \'b0\'a1\'b4\'c9\'bc\'ba\'c0\'cc \'b3\'f4\'bd\'c0\'b4\'cf\'b4\'d9.\
\
** \'c3\'d6\'c1\'be \'bf\'ac\'bb\'ea\
\
- \'c1\'df\'b0\'a3 \'bf\'ac\'bb\'ea\'b5\'c8 \'b0\'e1\'b0\'fa\'b8\'a6 \'b0\'a1\'c1\'f6\'b0\'ed \'b0\'e1\'b0\'fa\'b8\'a6 \'b8\'b8\'b5\'e9\'be\'ee \'b3\'bb\'b4\'c2 \'bf\'ac\'bb\'ea\
- \'c7\'d1 \'b9\'f8\'b8\'b8 \'bc\'f6\'c7\'e0 \'b0\'a1\'b4\'c9\
\
1. \'c1\'be\'b7\'f9\
\
1) \'b8\'c5\'c4\'aa\'c0\'cc \'b5\'c7\'b4\'c2\'c1\'f6 \'c8\'ae\'c0\'ce\'c7\'d8\'c1\'d6\'b4\'c2 \'b8\'de\'bc\'d2\'b5\'e5\
\
- boolean allMatch(\'c7\'d4\'bc\'f6) : \'c7\'d4\'bc\'f6\'b8\'a6 \'bc\'f6\'c7\'e0\'c7\'d1 \'b0\'e1\'b0\'fa\'b0\'a1 \'b8\'f0\'b5\'ce true\'c0\'ce \'b0\'e6\'bf\'ec true\
- boolean anyMatch(\'c7\'d4\'bc\'f6) : \'c7\'d4\'bc\'f6\'b8\'a6 \'bc\'f6\'c7\'e0\'c7\'d1 \'b0\'e1\'b0\'fa \'c1\'df 1\'b0\'b3\'b6\'f3\'b5\'b5 true\'b6\'f3\'b8\'e9 true\
- boolean noneMatch(\'c7\'d4\'bc\'f6) : \'c7\'d4\'bc\'f6\'b8\'a6 \'bc\'f6\'c7\'e0\'c7\'d1 \'b0\'e1\'b0\'fa \'c1\'df 1\'b0\'b3\'b6\'f3\'b5\'b5 true\'b6\'f3\'b8\'e9 false\
\
2) \'c1\'fd\'b0\'e8\'c7\'d4\'bc\'f6\
\
- long count() : \'b5\'a5\'c0\'cc\'c5\'cd \'b0\'b3\'bc\'f6\
- OptionalXXX findFirst() : \'c3\'b9\'b9\'f8\'c2\'b0 \'b5\'a5\'c0\'cc\'c5\'cd\
- OptionalXXX max() : \'b0\'a1\'c0\'e5 \'c5\'ab \'b5\'a5\'c0\'cc\'c5\'cd\
- OptionalXXX min() : \'b0\'a1\'c0\'e5 \'c0\'db\'c0\'ba \'b5\'a5\'c0\'cc\'c5\'cd\
- OptionalDouble average() : \'c6\'f2\'b1\'d5\
- OptionalXXX reduce() : \'c7\'d4\'bc\'f6\'b8\'a6 \'bc\'f6\'c7\'e0\'c7\'d1 \'b0\'e1\'b0\'fa\
- int, long, double sum() : \'c7\'d5\'b0\'e8\
\
3) \'c7\'cf\'b3\'aa\'be\'bf \'bc\'f8\'c2\'f7\'c0\'fb\'c0\'b8\'b7\'ce \'c7\'d4\'bc\'f6\'b8\'a6 \'bc\'f6\'c7\'e0\
\
void forEach(\'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b0\'a1 1\'b0\'b3\'c0\'ce \'c7\'d4\'bc\'f6)\
\
4) \'b0\'e1\'b0\'fa\'b8\'a6 \'b4\'d9\'b8\'a5 \'c7\'fc\'c5\'c2\'b7\'ce \'c0\'fa\'c0\'e5\
\
R collect()\
\
2. Optional\
\
- NullPointerException\'c0\'c7 \'b9\'df\'bb\'fd\'c0\'bb \'c1\'d9\'c0\'cc\'b1\'e2 \'c0\'a7\'c7\'d8\'bc\'ad \'b5\'ee\'c0\'e5\'c7\'d1 \'c0\'da\'b7\'e1\'c7\'fc\
- \'c2\'fc\'c1\'b6\'c7\'fc\'c0\'ba null\'c0\'bb \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2\'b5\'a5 \'c2\'fc\'c1\'b6\'c7\'fc \'ba\'af\'bc\'f6\'b0\'a1 \'c0\'da\'bd\'c5\'c0\'c7 \'bc\'d3\'bc\'ba\'c0\'cc\'b3\'aa \'b8\'de\'bc\'d2\'b5\'e5\'b8\'a6 \'c8\'a3\'c3\'e2\'c7\'cf\'b4\'c2 \'b9\'ae\'c0\'e5\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'b8\'e9\
\'c4\'c4\'c6\'c4\'c0\'cf \'c7\'d2 \'b6\'a7\'b4\'c2 \'b9\'ae\'b9\'fd\'b8\'b8 \'b0\'cb\'bb\'e7\'c7\'cf\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 \'c2\'fc\'c1\'b6\'c7\'fc \'ba\'af\'bc\'f6\'bf\'a1 null\'c0\'cc \'c0\'d6\'b4\'f5\'b6\'f3\'b5\'b5 \'bf\'a1\'b7\'af\'b0\'a1 \'b9\'df\'bb\'fd\'c7\'cf\'c1\'f6 \'be\'ca\'b0\'ed \'bd\'c7\'c7\'e0 \'c7\'d2 \'b6\'a7 \'b9\'ae\'c1\'a6\'b0\'a1 \'bb\'fd\'b1\'e9\'b4\'cf\'b4\'d9.\
- \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b9\'d6\'bf\'a1\'bc\'ad\'b4\'c2 \'c0\'cc\'b7\'af\'c7\'d1 \'bf\'b9\'bf\'dc\'b8\'a6 \'b9\'e6\'c1\'f6\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8\'bc\'ad \'c2\'fc\'c1\'b6\'c7\'fc \'b5\'a5\'c0\'cc\'c5\'cd\'c0\'c7 \'b0\'e6\'bf\'ec\'b4\'c2 null\'c3\'bc\'c5\'a9\'b8\'a6 \'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb\'c7\'df\'bd\'c0\'b4\'cf\'b4\'d9.\
- \'be\'d6\'c3\'ca\'bf\'a1 null\'c0\'bb \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'c2\'fc\'c1\'b6\'c7\'fc\'b0\'fa null\'c0\'bb \'c0\'fa\'c0\'e5\'c7\'d2 \'bc\'f6 \'be\'f8\'b4\'c2 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'bb \'b1\'b8\'ba\'d0\'c7\'d8\'bc\'ad \'bb\'e7\'bf\'eb\'c7\'cf\'b1\'e2 \'c0\'a7\'c7\'d8\'bc\'ad \'b5\'ee\'c0\'e5\'c7\'d1 \'b0\'cd\'c0\'cc Optional \'c0\'d3\
- Optional \'c5\'b8\'c0\'d4\'bf\'a1\'bc\'ad \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b0\'a1\'c1\'ae\'bf\'c3 \'b6\'a7\'b4\'c2 \'be\'c6\'b7\'a1 \'b8\'de\'bc\'d2\'b5\'e5 \'c1\'df\'bf\'a1 \'c7\'cf\'b3\'aa\'b8\'a6 \'bb\'e7\'bf\'eb\
\
=> T get() : \'b9\'ab\'c1\'b6\'b0\'c7 \'b0\'a1\'c1\'ae\'bf\'c0\'b4\'c2\'b5\'a5 null\'c0\'cc\'b8\'e9 \'bf\'b9\'bf\'dc \'b9\'df\'bb\'fd\
=> T orElse(T \'b1\'e2\'ba\'bb\'b0\'aa) : null\'c0\'cc\'b8\'e9 \'b1\'e2\'ba\'bb\'b0\'aa\'c0\'b8\'b7\'ce \'bc\'b3\'c1\'a4\
=> boolean isPresent() : null\'c0\'cc\'b8\'e9 false null \'c0\'cc \'be\'c6\'b4\'cf\'b8\'e9 true\
\
- swift \'bf\'cd kotlin\'bf\'a1\'bc\'ad \'b5\'a5\'c0\'cc\'c5\'cd \'c5\'b8\'c0\'d4 \'ba\'ce\'ba\'d0\'c0\'cc \'b0\'a1\'c0\'e5 \'c5\'a9\'b0\'d4 \'b9\'d9\'b2\'ef \'ba\'ce\'ba\'d0\
\
3. forEach\
\
- \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'c7 \'b8\'f0\'b5\'e7 \'bf\'e4\'bc\'d2\'bf\'a1\'b0\'d4 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b7\'ce \'b4\'eb\'c0\'d4\'b5\'c8 \'c7\'d4\'bc\'f6\'b8\'a6 \'bd\'c7\'c7\'e0\'bd\'c3\'c5\'b0\'b4\'c2 \'c3\'d6\'c1\'be \'bf\'ac\'bb\'ea\'c0\'d4\'b4\'cf\'b4\'d9.\
- \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b7\'ce \'b4\'eb\'c0\'d4\'b5\'c8 \'c7\'d4\'bc\'f6\'b4\'c2 1\'b0\'b3\'c0\'c7 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b8\'a6 \'b0\'a1\'c1\'f6\'b0\'ed \'b8\'ae\'c5\'cf\'c0\'bb \'c7\'cf\'c1\'f6 \'be\'ca\'be\'c6\'be\'df \'c7\'d5\'b4\'cf\'b4\'d9.\
- \'c0\'cc \'b6\'a7 \'b4\'eb\'c0\'d4\'b5\'c7\'b4\'c2 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b4\'c2 \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'c7 \'b0\'a2 \'bf\'e4\'bc\'d2\'b5\'e9\'c0\'cc \'bc\'f8\'c2\'f7\'c0\'fb\'c0\'b8\'b7\'ce \'b4\'eb\'c0\'d4\'b5\'cb\'b4\'cf\'b4\'d9.\
- \'c7\'d4\'bc\'f6\'b4\'c2 Consumer \'c0\'ce\'c5\'cd\'c6\'e4\'c0\'cc\'bd\'ba\'b8\'a6 implements \'c7\'d1 \'c5\'ac\'b7\'a1\'bd\'ba\'c0\'c7 \'b0\'b4\'c3\'bc\'b8\'a6 \'b4\'eb\'c0\'d4\'c7\'d8\'b5\'b5 \'b5\'c7\'b0\'ed(\'c0\'da\'b7\'e1\'c7\'fc \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6) ->\{\'bc\'f6\'c7\'e0\'c7\'d2\'b3\'bb\'bf\'eb;\}\
\'c7\'fc\'c5\'c2\'c0\'c7 \'b6\'f7\'b4\'d9\'bd\'c4\'c0\'bb \'b4\'eb\'c0\'d4\'c7\'d8\'b5\'b5 \'b5\'cb\'b4\'cf\'b4\'d9.\
- \'b6\'f7\'b4\'d9\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'d2 \'b6\'a7 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'c0\'c7 \'c0\'da\'b7\'e1\'c7\'fc\'c0\'ba \'bb\'fd\'b7\'ab\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'ed \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b0\'a1 1\'b0\'b3\'c0\'ce \'b0\'e6\'bf\'ec\'b4\'c2 ()\'c0\'bb \'bb\'fd\'b7\'ab\'c7\'cf\'b0\'ed \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6 \'c0\'cc\'b8\'a7\'b8\'b8 \'b1\'e2\'c0\'e7\'c7\'d8\'b5\'b5 \'b5\'ca\
- \'bc\'f6\'c7\'e0\'c7\'d2 \'b3\'bb\'bf\'eb\'c0\'bb \'c0\'db\'bc\'ba\'c7\'d2 \'b6\'a7 \'bc\'f6\'c7\'e0\'c7\'d2 \'b3\'bb\'bf\'eb\'c0\'cc 1\'c1\'d9\'c0\'cc\'b8\'e9 \{ \}\'b8\'a6 \'bb\'fd\'b7\'ab\'c7\'d8\'b5\'b5 \'b5\'c7\'b0\'ed ;(\'bc\'bc\'b9\'cc\'c4\'dd\'b7\'d0)\'b5\'b5 \'bb\'fd\'b7\'ab\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'d5\'b4\'cf\'b4\'d9.\
\
\'bd\'c7\'bd\'c0)\
\pard\pardeftab720\partightenfactor0
\cf2 package\cf0  com.naver.choch92.stream;\
\
\cf2 import\cf0  java.util.Arrays;\
\cf2 import\cf0  java.util.stream.Stream;\
\
\cf2 public\cf0  \cf2 class\cf0  MapReduceMain1 \{\
\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] \cf3 args\cf0 ) \{\
		\cf7 // Student\'c0\'c7 \'b9\'e8\'bf\'ad\'c0\'bb \'bb\'fd\'bc\'ba\cf0 \
		Student [] \cf3 students\cf0  = \{\
			\cf2 new\cf0  Student(1, \cf6 "\'be\'c6\'c0\'cc\'b8\'b0"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(2, \cf6 "\'c2\'f7\'b9\'fc\'b1\'d9"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 88),\
			\cf2 new\cf0  Student(3, \cf6 "\'b9\'da\'c1\'a4\'bc\'f7"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 90),\
			\cf2 new\cf0  Student(4, \cf6 "\'c0\'cc\'c1\'be\'b9\'fc"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 91),\
			\cf2 new\cf0  Student(5, \cf6 "\'bc\'b1\'b5\'bf\'b7\'c4"\cf0 , \cf6 "\'b3\'b2\'c0\'da"\cf0 , 76),\
			\cf2 new\cf0  Student(6, \cf6 "\'ba\'b8\'be\'c6"\cf0 , \cf6 "\'bf\'a9\'c0\'da"\cf0 , 92)\
		\};\
		\cf7 // \'b9\'e8\'bf\'ad\'c0\'bb \'bd\'ba\'c6\'ae\'b8\'b2\'c0\'b8\'b7\'ce \'bb\'fd\'bc\'ba\cf0 \
		Stream <Student> \cf3 stream\cf0  = Arrays.stream(\cf3 students\cf0 );\
		\cf7 // Map-Reduce Programming\cf0 \
		\cf3 stream\cf0 .filter((Student \cf3 student\cf0 ) ->\{\
			\cf2 return\cf0  \cf3 student\cf0 .getGender().contentEquals(\cf6 "\'bf\'a9\'c0\'da"\cf0 );\
		\}).forEach((Student \cf3 student\cf0 )-> \{System.\cf8 out\cf0 .println(\cf3 student\cf0 );\
		\});\
	\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\'b0\'e1\'b0\'fa)\
\pard\pardeftab720\partightenfactor0
\cf0 Student [num=1, name=\'be\'c6\'c0\'cc\'b8\'b0, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=3, name=\'b9\'da\'c1\'a4\'bc\'f7, gender=\'bf\'a9\'c0\'da, score=90]\
Student [num=6, name=\'ba\'b8\'be\'c6, gender=\'bf\'a9\'c0\'da, score=92]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
- \'be\'c8\'b5\'e5\'b7\'ce\'c0\'cc\'b5\'e5\'bf\'cd iOS\'c0\'c7 swift\'bf\'a1\'bc\'ad \'b6\'f7\'b4\'d9\'b8\'a6 \'b8\'b9\'c0\'cc \'bb\'e7\'bf\'eb\'c7\'cf\'b1\'e2 \'b6\'a7\'b9\'ae\'bf\'a1 \'b6\'f7\'b4\'d9\'b8\'a6 \'c0\'d0\'c0\'bb \'bc\'f6 \'c0\'d6\'be\'ee\'be\'df \'c7\'d5\'b4\'cf\'b4\'d9.\
- \'be\'c8\'b5\'e5\'b7\'ce\'c0\'cc\'b5\'e5 \'c0\'cc\'ba\'a5\'c6\'ae \'c3\'b3\'b8\'ae\'b8\'a6 \'b4\'eb\'ba\'ce\'ba\'d0 \'b6\'f7\'b4\'d9\'b8\'a6 \'c0\'cc\'bf\'eb\'c7\'d8\'bc\'ad \'c0\'db\'bc\'ba\'c7\'d5\'b4\'cf\'b4\'d9.\
- swift\'bf\'a1\'bc\'ad\'b4\'c2 \'c4\'dd\'b9\'e9 \'b8\'de\'bc\'d2\'b5\'e5\'b5\'e9\'c0\'bb \'b6\'f7\'b4\'d9\'b7\'ce \'c0\'db\'bc\'ba\'c7\'cf\'b4\'c2 \'b0\'e6\'bf\'ec\'b0\'a1 \'c1\'be\'c1\'be \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9.}